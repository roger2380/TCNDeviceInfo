//
//  TCRSA.m
//  TCCommon
//
//  Created by YongQing Gu on 8/13/12.
//  Copyright (c) 2012 TrueColor. All rights reserved.
//

#import "TCNRSA.h"
#import "TCNBase64.h"

@implementation TCNRSA

static unsigned char _public_key_bytes[] = {
  0x30, 0x82, 0x02, 0xf2, 0x30, 0x82, 0x02, 0x5b, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0x9e, 0xf0, 0x12, 0xae, 
  0xce, 0xb5, 0xd5, 0xed, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 
  0x81, 0x91, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 
  0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x53, 0x48, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x08, 0x53, 
  0x68, 0x61, 0x6e, 0x67, 0x48, 0x61, 0x69, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0d, 0x54, 0x72, 
  0x75, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 
  0x0c, 0x0d, 0x54, 0x72, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x31, 0x0d, 0x30, 0x0b, 0x06, 
  0x03, 0x55, 0x04, 0x03, 0x0c, 0x04, 0x59, 0x6f, 0x72, 0x6b, 0x31, 0x23, 0x30, 0x21, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 
  0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x14, 0x67, 0x79, 0x71, 0x35, 0x33, 0x31, 0x39, 0x39, 0x32, 0x30, 0x40, 0x67, 0x6d, 
  0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x32, 0x30, 0x38, 0x31, 0x33, 0x30, 0x37, 0x30, 
  0x36, 0x35, 0x30, 0x5a, 0x17, 0x0d, 0x31, 0x32, 0x30, 0x39, 0x31, 0x32, 0x30, 0x37, 0x30, 0x36, 0x35, 0x30, 0x5a, 0x30, 
  0x81, 0x91, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 
  0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x53, 0x48, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x08, 0x53, 
  0x68, 0x61, 0x6e, 0x67, 0x48, 0x61, 0x69, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0d, 0x54, 0x72, 
  0x75, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 
  0x0c, 0x0d, 0x54, 0x72, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x31, 0x0d, 0x30, 0x0b, 0x06, 
  0x03, 0x55, 0x04, 0x03, 0x0c, 0x04, 0x59, 0x6f, 0x72, 0x6b, 0x31, 0x23, 0x30, 0x21, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 
  0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x14, 0x67, 0x79, 0x71, 0x35, 0x33, 0x31, 0x39, 0x39, 0x32, 0x30, 0x40, 0x67, 0x6d, 
  0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 
  0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xb7, 0xef, 0x2e, 0xd4, 
  0xd7, 0xde, 0x77, 0x0c, 0xc1, 0xf8, 0xaa, 0x99, 0x34, 0xfb, 0x86, 0x99, 0x04, 0x04, 0xb1, 0xce, 0x5d, 0xa8, 0x70, 0x96, 
  0xa7, 0x9f, 0xcd, 0x1b, 0xc3, 0xbf, 0xa2, 0x40, 0xb6, 0x32, 0xa1, 0xa2, 0x31, 0x75, 0x5c, 0xd1, 0xf9, 0x49, 0x5e, 0xa3, 
  0x8c, 0x65, 0x0c, 0xab, 0x01, 0x9d, 0x4b, 0x82, 0x7d, 0xf5, 0xae, 0x2d, 0xe5, 0x05, 0xa8, 0xbe, 0xe5, 0x8d, 0xa7, 0x92, 
  0x7a, 0x3f, 0x3e, 0x1d, 0x12, 0xea, 0x82, 0x05, 0xe0, 0x3d, 0x5b, 0xe8, 0xfa, 0x22, 0x62, 0xbc, 0xc2, 0xc5, 0xa7, 0x11, 
  0xa5, 0xef, 0xf2, 0x8c, 0x5a, 0x59, 0x99, 0xd5, 0x18, 0xc5, 0x63, 0x2e, 0xfc, 0xab, 0x7d, 0x00, 0x15, 0xfc, 0x2a, 0x27, 
  0x5d, 0x60, 0x49, 0x14, 0x2f, 0xad, 0x6b, 0xc7, 0x17, 0x3d, 0x92, 0x0e, 0xc1, 0xa9, 0x82, 0xf4, 0x1c, 0xb3, 0x38, 0xb7, 
  0xe7, 0xe2, 0xb3, 0x95, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x50, 0x30, 0x4e, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 
  0x04, 0x16, 0x04, 0x14, 0xc9, 0xd2, 0xb2, 0xdb, 0xe4, 0x07, 0x79, 0xeb, 0x88, 0xd8, 0xa9, 0x2c, 0x87, 0xca, 0xea, 0x31, 
  0xcc, 0x05, 0x2a, 0x56, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xc9, 0xd2, 0xb2, 
  0xdb, 0xe4, 0x07, 0x79, 0xeb, 0x88, 0xd8, 0xa9, 0x2c, 0x87, 0xca, 0xea, 0x31, 0xcc, 0x05, 0x2a, 0x56, 0x30, 0x0c, 0x06, 
  0x03, 0x55, 0x1d, 0x13, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 
  0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x82, 0x48, 0x8a, 0xf9, 0x83, 0x6d, 0xbd, 0x8a, 0x3b, 0x1e, 
  0x02, 0xa6, 0x35, 0x9a, 0x09, 0x03, 0xb4, 0x0a, 0x26, 0x57, 0xfa, 0x36, 0x00, 0xdd, 0x94, 0xc6, 0x0b, 0x1a, 0x70, 0xed, 
  0x53, 0x47, 0x80, 0xd7, 0x6f, 0x2e, 0x81, 0xf0, 0xe5, 0x42, 0x55, 0x3f, 0xfc, 0x63, 0x3d, 0xc9, 0x03, 0x5f, 0xe7, 0x53, 
  0x80, 0xaf, 0xae, 0x8f, 0xcd, 0x69, 0xa9, 0x0b, 0x4e, 0xa4, 0xe9, 0x23, 0x62, 0x8b, 0x94, 0x67, 0xde, 0x8f, 0x20, 0x1a, 
  0x5d, 0xb5, 0xf5, 0xce, 0xce, 0x67, 0x54, 0x71, 0xc6, 0x3a, 0xa0, 0x29, 0x62, 0xfb, 0xdc, 0xd9, 0xe0, 0x26, 0xdb, 0x77, 
  0xe0, 0x43, 0x5f, 0x62, 0xcb, 0xbb, 0x36, 0x64, 0xe8, 0x36, 0xcd, 0xf7, 0x59, 0xfc, 0x0e, 0x82, 0xb3, 0x53, 0xfb, 0xf0, 
  0x24, 0x40, 0x84, 0x6f, 0xae, 0x95, 0x19, 0x7f, 0xa5, 0xb4, 0x14, 0x26, 0x7b, 0xd6, 0x0a, 0x0f, 0xf9, 0x05
};

static SecKeyRef _public_key=nil;

+ (SecKeyRef)getPublicKey { // 从公钥证书文件中获取到公钥的SecKeyRef指针
  if(_public_key == nil) {
    NSData *certificateData = [NSData dataWithBytes:_public_key_bytes length:758];
    SecCertificateRef myCertificate =  SecCertificateCreateWithData(kCFAllocatorDefault, (CFDataRef)certificateData);
    SecPolicyRef myPolicy = SecPolicyCreateBasicX509();
    SecTrustRef myTrust;
    OSStatus status = SecTrustCreateWithCertificates(myCertificate, myPolicy, &myTrust);
    SecTrustResultType trustResult;
    if (status == noErr) {
      SecTrustEvaluate(myTrust, &trustResult);
    }
    _public_key = SecTrustCopyPublicKey(myTrust);
    CFRelease(myCertificate);
    CFRelease(myPolicy);
    CFRelease(myTrust);
  }
  return _public_key;
}

+ (NSData *)encrypt:(NSString *)string {
  SecKeyRef key = [self getPublicKey];
  size_t cipherBufferSize = SecKeyGetBlockSize(key);
  uint8_t *cipherBuffer = malloc(cipherBufferSize * sizeof(uint8_t));
  NSData *stringBytes = [string dataUsingEncoding:NSUTF8StringEncoding];
  size_t blockSize = cipherBufferSize - 12;
  size_t blockCount = (size_t)ceil([stringBytes length] / (double)blockSize);
//  NSLog(@"[RSA encrypt] string bytes length: %d", stringBytes.length);
//  NSLog(@"[RSA encrypt] cipherBufferSize=%lu", cipherBufferSize);
//  NSLog(@"[RSA encrypt] blockSize=%lu, blockCount=%ld", blockSize, blockCount);
  
  NSMutableData *encryptedData = [[NSMutableData alloc] init];
  for (int i = 0; i < blockCount; i++) {
    int bufferSize = MIN(blockSize,[stringBytes length] - i * blockSize);
    NSData *buffer = [stringBytes subdataWithRange:NSMakeRange(i * blockSize, bufferSize)];
    OSStatus status = SecKeyEncrypt(key, kSecPaddingPKCS1, (const uint8_t *)[buffer bytes],
                                    [buffer length], cipherBuffer, &cipherBufferSize);
    if (status == noErr){
      NSData *encryptedBytes = [[NSData alloc] initWithBytes:(const void *)cipherBuffer length:cipherBufferSize];
      [encryptedData appendData:encryptedBytes];
    }else{
      if (cipherBuffer) free(cipherBuffer);
      return nil;
    }
  }
  if (cipherBuffer) free(cipherBuffer);
  return encryptedData;
}

+ (NSString *)doOffset:(NSString *)string offset:(NSInteger)offset {
  static char chars[] = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
  };
  static char indexOfChars[] = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, 
    -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, 
    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1
  };
  offset = offset % 64;
  const char *charArray = [string cStringUsingEncoding:NSUTF8StringEncoding];
  NSInteger length = strlen(charArray) + 1;
  char *offsetedCharArray = (char *)malloc(length);
  bzero(offsetedCharArray, length);
  for (NSInteger i = length - 2; i >= 0; i--) {
    char c = charArray[i];
    if (c == '/' || c == '+' || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || ( c>= '0' && c <= '9')){
      NSInteger index = indexOfChars[c] + offset;
      if (index >= 64) index -= 64;
      if (index < 0) index += 64;
      offsetedCharArray[i] = chars[index];
    }else {
      offsetedCharArray[i] = c;
    }
  }
  NSString *result = [NSString stringWithCString:offsetedCharArray encoding:NSUTF8StringEncoding];
  free(offsetedCharArray);
  return result;
}

@end
